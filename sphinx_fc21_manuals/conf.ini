# conf.ini
#
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: 2022 James Robertson <jwrober@gmail.com>

[MAIN]
# Path to freeciv21 data directory
conf.fc21_datadir_path = ~/GitHub/freeciv21/data

# Path for output
conf.fc21_rst_output = ~/GitHub/freeciv21/docs/Manuals/Rulesets

# rulesets to process (converted to a tuple in code)
conf.fc21_rulesets = civ1,civ2,civ2civ3

#todo: find "actor", "'"

[GAME]
conf.description = Short description of a ruleset.
conf.options = Options capability string for a ruleset.
conf.format_version = 10 is for freeciv 3.0 and 20 is for freeciv 3.1.
conf.description_file = Which file to read a long description in from.
conf.name = Ruleset name.
conf.version = Ruleset version.
conf.alt_dir = When about to migrate ruleset under a new name in the future version, set ``alt_dir`` to the name of
    that future directory. Then savegames saved with this version of freeciv21 can find the ruleset from the
    correct place when loading the savegame to the future version.
conf.summary = Summary of the ruleset.
conf.description = Detailed description of the ruleset.
conf.capabilities = This ruleset has the following scenario capabilities:
conf.global_init_techs = This ruleset starts a player with the folliwing technology advances at game start:
conf.global_init_buildings = This ruleset starts a player with the following city improvements (buildings) at game
    start:
conf.preferred = A preferred tileset, soundset or musicset for the game.
conf.granary_food_ini = ?
conf.granary_food_inc = ?
conf.min_city_center_food = Minimum amount of food a city center tile generates.
conf.min_city_center_shield = Minimum amount of production a city center tile generates.
conf.min_city_center_trade = Minimum amount of trade a city center tile generates.
conf.init_city_radius_sq = Square of initial city radius.
conf.init_vis_radius_sq = Square of initially visible radius (true distance).
conf.upgrade_veteran_loss = Number of veteran levels lost when upgrading a unit.
conf.autoupgrade_veteran_loss = Number of veteran levels lost when auto-upgrading a unit.
conf.pillage_select = True/False: Whether player gets to select which terrain improvement to pillage.
conf.tech_steal_allow_holes = True/False: Whether one can steal a tech for which prerequisites are not known.
conf.tech_trade_allow_holes = True/False: Whether one can get a tech for which prerequisites are not known via
    diplomatic trading.
conf.tech_trade_loss_allow_holes = True/False: Whether one can lose a tech which is a prerequisite for another
    known tech via trade, if ``techlost_donor`` is nonzero.
conf.tech_parasite_allow_holes = True/False: Whether one can get a tech for which prerequisites are notknown via
    the ``parasite`` effect (e.g. Great Library).
conf.tech_loss_allow_holes = True/False: Whether one can lose a tech which is a prerequisite for another known tech
    due to negative bulbs, if ``techlossforgiveness`` allows loss.
conf.initial_diplomatic_state = The diplomatic state between two nations that meet for the first time.
conf.civil_war_enabled = True/False: Whether civil war is possible at all.
conf.civil_war_bonus_celebrating = The value indicates how many percents each celebrating city affects chanceof
    civil war.
conf.civil_war_bonus_unhappy = The value indicates how many percents each unhappy city affects chance of civil war.
conf.gameloss_style = A list of things to happen, in addition to death of owner, when a ``gameloss`` unit(e.g. last
    unit) dies. `CivilWar`: Part of the nation remains, controlled by a new player. `Barbarians`: Depending on
    if there is also `CivilWar`, all or part or half of the dead player's empire goes under barbarian control.
    `Loot`: The player who killed the ``gameloss`` unit gets loot, such as partial map, gold, technologies, or
    cities.
conf.paradrop_to_transport = True/False: Whether units may safely paradrop to a transport on non-native terrain.
conf.gold_upkeep_style = Method of paying unit and improvement gold upkeep. `City`: The player`s total gold must be
    non-negative after paying upkeep costs associated with each city. If for any city the player`s gold is
    negative, random buildings in the city are sold off. If the gold is still negative, then supported units
    with gold upkeep are disbanded. `Mixed`: In the first step, the player`s total gold must be non-negative
    after paying upkeep for all buildings within a city. If for any city the player`s gold is negative, random
    buildings in the city are sold off. In the second step, gold upkeep for all units is paid in a lump sum.
    If the player does not have enough gold, random units with gold upkeep are disbanded. `Nation`: Gold
    upkeep for all buildings and units is paid in a lump sum after all cities have been processed. If the
    player does not have enough gold, random buildings from random cities are sold. If still more gold is
    needed, then random units with gold upkeep are disbanded.
conf.output_granularity = How many points of output one basic unit consists of. Typically you want this to be some
    :math:`10^n`.
conf.illness_on = True/False: Whether plagues (illness) are possible.
conf.illness_base_factor = The base percentage factor for illness.
conf.illness_min_size = Minimum city size for illness.
conf.illness_trade_infection = The percentage factor for how much trading with a plagued city increases our city`s
    chance for plague.
conf.illness_pollution_factor = The percentage factor for how much pollution within a city increases its chance for
    plague.
conf.improvement_factor = The values for ``improvement_factor``, ``unit_factor``, and ``total_factor`` are used as
    part of a math equation to calculate the cost to incide a city. The formula is
    :math:`city_incite_cost = total_factor * (city_size) * (base_incite_cost + (units_cost) * unit_factor + (improvements_cost) * improvement_factor) / ((distance to capital) * 100)`.
conf.tired_attack = True/False: If set to ``TRUE``, units that attack with less than a single move point (per
    ``move_fragments`` in Terrain) will have their attack power reduced accordingly.
conf.only_killing_makes_veteran = True/False: With some rules it is possible that neither side of a combat dies.
    Set this to ``TRUE`` if unit should never gain veterancy from such a combat.
conf.nuke_pop_loss_pct = Percentage of population lost by a city after a nuclear attak. If set to ``100`` the city
    is destroyed along with all the units. If set to ``0`` the city does not loose population. Any value
    below ``100`` means the city can never be destroyed completely using a nuclear unit.
conf.nuke_defender_survival_chance_pct = Percentage chance of a city defender surviving a nuclear attack. When set
    to ``50`` roughly half of the defenders will survive a nuclear attack. When set to ``0`` no defenders
    will survive. When set to ``100`` all defenders will survive.
conf.attack_actions = An auto attack may be triggered when another unit moves to an adjacent tile and the
    ``autoattack`` server setting is enabled. The values are the possible actions.
conf.if_attacker = This is a requirement vector table listing the rules that all must be true for auto attack
    actions to occur.
conf.force_trade_route = True/False: If set to ``TRUE`` it is illegal for a unit to enter the marketplace of a
    city if it can establish a trade route to it in stead.
conf.force_capture_units = True/False: If set to ``TRUE`` it is illegal for a unit to bombard, explode a nuclear or
    perform a regular attack against a tile if it can capture units on it in stead.
conf.force_bombard = True/False: If set to ``TRUE`` it is illegal for a unit to explode a nuclear or perform a
    regular attack against a tile if it can bombard it in stead.
conf.force_explode_nuclear = True/False: If set to ``TRUE`` it is illegal for a unit to perform a regular attack
    against a tile if it can explode a nuclear unit instead.
conf.poison_empties_food_stock = True/False: If set to ``TRUE`` a successful "Poison City" or "Poison City Escape"
    action will empty the food stock (granary).
conf.steal_maps_reveals_all_cities = True/False: If set to ``TRUE`` a successful "Steal Maps" or "Steal Maps
    Escape" action will transfer the map for all tiles containing a city.
conf.help_wonder_max_range = The maximum distance from the unit to the target of the "Help Build Wonder" action.
    The value ``0`` means that the target`s tile must be the tile of the unit. The value ``1`` means that the
    city must be on a tile adjacent to the unit. The special value "unlimited" lifts the maximum distance
    restriction. The maximum distance cannot be smaller than the minimum distance.
conf.recycle_unit_max_range = The maximum distance from the unit to the target of the "Recycle Unit" action. The
    value ``0`` means that the target`s tile must be the tile of the unit. The value ``1`` means that the city
    must be on a tile adjacent to the unit. The special value "unlimited" lifts the maximum distance
    restriction. The maximum distance can`t be smaller than the minimum distance.
conf.bombard_max_range = The maximum distance from the unit to the target of the "Bombard" action. The value ``1``
    means that the targets must be on a tile adjacent to the unit. The special value "unlimited" lifts the
    maximum distance restriction. The maximum distance cannot be smaller than the minimum distance.
conf.bombard_2_max_range = The maximum distance from the unit to the target of the "Bombard 2" action. The value
    ``1`` means that the targets must be on a tile adjacent to the unit. The special value "unlimited" lifts
    the maximum distance restriction. The maximum distance cannot be smaller than the minimum distance.
conf.bombard_3_max_range = The maximum distance from the unit to the target of the "Bombard 3" action. The value
    ``1`` means that the targets must be on a tile adjacent to the unit. The special value "unlimited" lifts
    the maximum distance restriction. The maximum distance cannot be smaller than the minimum distance.
conf.explode_nuclear_max_range = The maximum distance from the unit to the target of the "Explode Nuclear" action.
    The value ``0`` means that the target tile must be the tile of the unit. The value ``1`` means that the
    tile must be a tile adjacent to the unit. The special value "unlimited" lifts the maximum distance
    restriction. The maximum distance cannot be smaller than the minimum distance.
conf.nuke_city_max_range = The maximum distance from the unit to the target of the "Nuke City" action. The value
    ``1`` means that the tile must be a tile adjacent to the unit. The special value "unlimited" lifts the
    maximum distance restriction. The maximum distance cannot be smaller than the minimum distance.
conf.nuke_units_max_range = The maximum distance from the unit to the target of the "Nuke Units" action. The value
    ``1`` means that the tile must be a tile adjacent to the unit. The special value "unlimited" lifts the
    maximum distance restriction. The maximum distance cannot be smaller than the minimum distance.
conf.airlift_max_range = The maximum distance from the unit to the target of the "Airlift Unit" action. The value
    ``1`` means that the targets must be on a tile adjacent to the unit. The special value "unlimited" lifts
    the maximum distance restriction. The maximum distance cannot be smaller than the minimum distance.
conf.radius_sq_city = The base border radius from a city.
conf.size_effect = The border radius square increases by this amount divided by the of city size.
conf.radius_sq_city_permanent = This is the difference between a city's workable area and area permanently claimed
    by the city. These tiles cannot be stolen by a stronger border source. A value of ``0`` means the city
    workable area is immune to border stealing. A negative value means outer workable tiles can be stolen.
    Highly negative values (more than max city ``radius_sq``) means any workable tile can be stolen. If
    ``City_Radius_Sq`` is variable, so is the set of locked tiles. This is a squared value, so the radius of
    the ring of tiles which are workable, but not locked (or vice versa) varies but the area is constant.
conf.tech_cost_style = This is the method of calculating technology costs. `Civ I|II`: Civ (I|II) style. Every new
    technology adds ``base_tech_cost`` (see below) to the cost of the next technology. `Classic`: The cost of
    technology is: :math:`base_tech_cost * (1 + reqs) * sqrt(1 + reqs) / 2`, where ``reqs`` equals the number
    of requirements for the technology, counted recursively. `Classic+`: The costs are read from
    :file:`tech.ruleset`. Missing costs are generated by style `Classic`. `Experimental`: The cost of
    technology is: :math:`base_tech_cost * (reqs^2 / (1 + sqrt(sqrt(reqs + 1))) - 0.5), where ``reqs`` equals
    the number of requirements for the technology, counted recursively. Initial technology cost will be
    ``base_tech_cost``. `Experimental+`: The costs are read from :file:`tech.ruleset`. Missing costs are
    generated by style `Experimental`. `Linear`: The cost of technology is: :math:`base_tech_cost * reqs`,
    where ``reqs`` equals the number of requirements for the technology, counted recursively.
conf.base_tech_cost = The base research cost. Used in ``tech_cost_style`` where the technology cost is generated.
    In other words: used everywhere unless the cost of :strong:`all` technologies are specified and the
    technology cost style is `Experimental+` or `Classic+`.
conf.tech_leakage = The technology leakage from other civilizations. `None`: There is no reduction of the
    technology cost. `Embassies`: The technology cost is reduced depending on the number of players which
    already know the technology and you have an  embassy with. `All Players`: The technology cost is reduced
    depending on the number of all players (human, AI and barbarians) which already know the technology.
    `Normal Players`: The technology cost is reduced depending on the number of normal players (human and AI)
    which already know the technology.
conf.tech_upkeep_style = This is the method of paying technology upkeep. `None`: This is no technology upkeep.
    `Basic`: The technology upkeep is calculated as: :math:`<Cost of technology> / tech_upkeep_divider - tech_upkeep_free`
    `Cities`: The technology upkeep is calculated like `Basic`, but multiplied by the number of cities.
conf.free_tech_method = The method of selecting technologies given for free. `Goal`: Applied towards a player`s
    goal, random if no goal is set. `Random`: A random researchable technology is picked. `Cheapest`: The
    cheapest researchable technology, random among equal cost ones.
conf.victory_min_points = The minimum culture points for cultural domination victory.
conf.victory_lead_pct = How big of a lead relative to second best player is needed for victory.
conf.history_interest_pml = How much existing history grows each turn. This makes older history of the same
    original value more valuable as newer history, as it has gained more interest.
conf.migration_pml = How much each culture point affects the migration from/to the city. Each culture point counts
    as this many permilles of a migration point.
conf.skip_year_0 = True/False: If set to ``TRUE`` the game starts at Year 1.
conf.fragments = The value represents how many fragments each year has. In addition to this, ``Turn_Fragments``
    effects are needed to control fragment accumulation. A value of 0 disables year advancement by fragment
    accumulation.

[CITIES]
conf.add_to_size_limit = The size of a city has to be less than or equal to this value to be able to add population
    from a settler or other popluation containing unit.
conf.angry_citizens = True/False: If set to ``TRUE``, cities can have angry citizens.
conf.celebrate_size_limit = Cities have to be greater than or equal in size of this value before they can
    celebrate.
conf.changable_budget = True/False: If set to ``TRUE``, the game allows a changable national budget for science,
    luxury goods, and tax. I set to ``FALSE``, the amounts are hard coded.
conf.vision_reveal_tiles = ?
conf.pop_report_zeroes = ? Do we want to put this value in docs ?
conf.nationality = True/False: If set to ``TRUE``, then citizen nationality is enabled.
conf.convert_speed = The value represents the base probability of ?
conf.partisans_pct = The percentage of own nationality to inspire partisans. If ``0``, original city owner
    information is used instead.
conf.conquest_convert_pct = The percentage of citizens which converts to the new nation after a city was
    conquered. Applied separately for each nationality present in the city, and number of converted people
    rounded up.
conf.food_protected = For food supported units, if there is insufficient food to maintain the unit some units my
    have an action taken against them with the ``food_unit_act`` parameter. The value of this parameter is a
    unit class flag and if present on the food supported unit is protected from the action.
conf.food_unit_act =
conf.food_wipe =
conf.shield_protected =
conf.shield_unit_act =
conf.shield_wipe =
conf.gold_protected =
conf.gold_unit_act =
conf.gold_wipe =
